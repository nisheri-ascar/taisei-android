#!/usr/bin/env python3

from taiseilib.common import (
    run_main,
    update_text_file,
)

import argparse
import hashlib
import json
import re

from pathlib import Path


meta_re = re.compile(r'(.*loadPackage\()({.*?})(\);.*)', re.DOTALL)


def main(args):
    parser = argparse.ArgumentParser(description='Change package UUID in JavaScript loader generated by Emscripten\'s file_packager.py', prog=args[0])

    parser.add_argument('loader',
        help='the .js loader file',
        metavar='FILE',
        type=Path,
    )

    parser.add_argument('--output', '-o',
        help='write result to FILE (default: overwrite input)',
        metavar='FILE',
        type=Path,
    )

    g = parser.add_mutually_exclusive_group(required=True)

    g.add_argument('--uuid',
        help='manually specify an UUID',
        metavar='UUID',
        type=str,
    )

    g.add_argument('--sha1',
        help='take SHA1 of FILE and use that as an UUID',
        metavar='FILE',
        type=Path,
    )

    args = parser.parse_args(args[1:])

    if args.uuid is None:
        args.uuid = hashlib.sha1(args.sha1.read_bytes()).hexdigest()

    if args.output is None:
        args.output = args.loader

    pre, meta, post = meta_re.match(args.loader.read_text()).groups()

    meta = json.loads(meta)
    meta['package_uuid'] = args.uuid
    meta = json.dumps(meta, separators=(',', ':'), check_circular=False, ensure_ascii=False)

    update_text_file(args.output, pre + meta + post)


if __name__ == '__main__':
    run_main(main)
